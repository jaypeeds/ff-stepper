\ requires math.txt
marker -stepper
decimal
\ *********************************************************************
\                                                                     *
\    Filename:      stepper.txt                                       *
\    Date:          25.10.2020                                        *
\    FF Version:    5.0                                               *
\    C Author:      Tom Igoe & alit.                                  *
\    Forth Author:  Jean-Pierre de Soza aka Jaypee                    *
\ *********************************************************************
\ This is a very partial rewrite from C Stepper lib
\ https://github.com/arduino-libraries/Stepper/blob/master/src/Stepper.cpp
\ *********************************************************************
43 constant PORTD
42 constant DDRD
41 constant PIND
%00000100 constant PINDIR
%00001000 constant PINSTP
\
: carray: ( n "name" -- )
  create allot
  does> +
;
4 carray: 1STEP
%00000000 0 1STEP c!
%00000001 1 1STEP c!
%00000001 2 1STEP c!
%00000000 3 1STEP c!
4 carray: 2STEP
%00000001 0 2STEP c!
%00000001 1 2STEP c!
%00000000 2 2STEP c!
%00000000 3 2STEP c!

\
variable numberOfSteps
variable stepsLeft
variable stepNumber
variable lastStepTicks
variable clockwise
variable ticksNow
variable stepDelay
\ API to Initialise the stepper parameters
: init.stepper ( steps microsteps -- )
  * numberOfSteps !
  1 clockwise     c!
  0 stepNumber    !
  ticks lastStepTicks !
  \ PINDIR and PINSTP used as dirPin and stepPin (both in outputMode)
  \ as needed to control A4988 or TB6600 motor drivers
  PINDIR DDRD mset \ Output mode
  PINSTP DDRD mset \ Output mode
  PINDIR PORTD mset
  PINSTP PORTD mclr
;
\ API to set the revolutions per minute value
: setSpeed ( rpm -- )
  1000 1000 m* numberOfSteps @ um/mod swap drop swap / 60 *
  stepDelay ! \ micros
;
\ Activation of the stepper motor
: stepMotor ( thisStep -- )
  dup
  2STEP c@ 0= if
   PINDIR PORTD mclr
  else
   PINDIR PORTD mset
  then

  1STEP c@ 0= if
   PINSTP PORTD mclr
  else
   PINSTP PORTD mset
  then  
;
\ API to actually execute n steps
: steps ( stepsToMove -- )
  dup abs stepsLeft !
  0< if
    0 clockwise c!
  else
    1 clockwise c!
  then
  begin
    ticks ticksNow !
    ticksNow @ lastStepTicks @ - 1000 * \ millis to micros
    stepDelay @ < negate if
      clockwise c@ if
        1 stepNumber +!
        numberOfSteps @ stepNumber @ = if
          0 stepNumber !
        then
      else
        -1 stepNumber +!
        stepNumber @ 0< if
          numberOfSteps @ stepNumber !
        then
      then
      stepNumber @ 4 mod stepMotor
      -1 stepsLeft +!
      ticks lastStepTicks !
    then
    stepsLeft @ 0<
  until
;
\ Test and how to use it
: testSteps ( n -- )
  200 1 init.stepper
  50 setSpeed
  steps
  \ clear PORTD
  0 PORTD c!
;
